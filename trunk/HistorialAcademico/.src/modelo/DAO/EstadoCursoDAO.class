' Gambas class file
PUBLIC FUNCTION Total() AS integer 
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
    SQLString  = "SELECT idAlumno FROM EstadoCurso" 
try    mRs = conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al Intentar obtener lista")
  return -1 
endif 
RETURN val(Str$(mRs.Count)) 
End 

PUBLIC function registrar( NuevaEstadoCurso as EstadoCursoVO) as boolean
  Dim conectar as new conexion
  Dim SQLString As String
   conectar.Conexion()
SQLString = "INSERT INTO EstadoCurso(idAlumno,idEstadoCurso,idCurso,idExpediente) Values ("
SQLString &= "'" & NuevaEstadoCurso.idAlumno & "'"
SQLString &= ",'" & NuevaEstadoCurso.idEstadoCurso & "'"
SQLString &= ",'" & NuevaEstadoCurso.idCurso & "'"
SQLString &= ",'" & NuevaEstadoCurso.idExpediente & "')"
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al Intentar insertar datos, revise ID,  " & "\nError:  "   & error.text )
  return false 
endif 
conectar.desconectar() 
 return true 
 
END  

PUBLIC FUNCTION ModificarIdAlumno(editado as Integer,NuevaEstadoCurso as EstadoCursoVO) as boolean
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
SQLString = "UPDATE  EstadoCurso SET "
SQLString &= "idEstadoCurso='" & NuevaEstadoCurso.idEstadoCurso 
SQLString &= "', idCurso='" & NuevaEstadoCurso.idCurso 
SQLString &= "', idExpediente='" & NuevaEstadoCurso.idExpediente & "'" 
SQlString &= " WHERE idAlumno='" & editado & "'" 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al Modificar datos ")
 return false
else 
conectar.desconectar() 
 return true
ENDIF 
END  

PUBLIC FUNCTION ModificarIdEstadoCurso(editado as Integer,NuevaEstadoCurso as EstadoCursoVO) as boolean
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
SQLString = "UPDATE  EstadoCurso SET "
SQLString &= "idAlumno='" & NuevaEstadoCurso.idAlumno 
SQLString &= "', idCurso='" & NuevaEstadoCurso.idCurso 
SQLString &= "', idExpediente='" & NuevaEstadoCurso.idExpediente & "'" 
SQlString &= " WHERE idEstadoCurso='" & editado & "'" 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al Modificar datos ")
 return false
else 
conectar.desconectar() 
 return true
ENDIF 
END  

PUBLIC FUNCTION ModificarIdCurso(editado as Integer,NuevaEstadoCurso as EstadoCursoVO) as boolean
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
SQLString = "UPDATE  EstadoCurso SET "
SQLString &= "idAlumno='" & NuevaEstadoCurso.idAlumno 
SQLString &= "', idEstadoCurso='" & NuevaEstadoCurso.idEstadoCurso 
SQLString &= "', idExpediente='" & NuevaEstadoCurso.idExpediente & "'" 
SQlString &= " WHERE idCurso='" & editado & "'" 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al Modificar datos ")
 return false
else 
conectar.desconectar() 
 return true
ENDIF 
END  

PUBLIC FUNCTION ModificarIdExpediente(editado as Integer,NuevaEstadoCurso as EstadoCursoVO) as boolean
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
SQLString = "UPDATE  EstadoCurso SET "
SQLString &= "idAlumno='" & NuevaEstadoCurso.idAlumno 
SQLString &= "', idEstadoCurso='" & NuevaEstadoCurso.idEstadoCurso 
SQLString &= "', idCurso='" & NuevaEstadoCurso.idCurso & "'"
SQlString &= " WHERE idExpediente='" & editado & "'" 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al Modificar datos ")
 return false
else 
conectar.desconectar() 
 return true
ENDIF 
END  

PUBLIC function BorrarIdAlumno( valor AS Integer) as boolean 
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
sqlstring="DELETE FROM EstadoCurso WHERE idAlumno=" & str$(valor) 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: "   & error.text)
 return false
else
conectar.desconectar() 
 return true
ENDIF 
END

PUBLIC function BorrarIdEstadoCurso( valor AS Integer) as boolean 
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
sqlstring="DELETE FROM EstadoCurso WHERE idEstadoCurso=" & str$(valor) 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: "   & error.text)
 return false
else
conectar.desconectar() 
 return true
ENDIF 
END

PUBLIC function BorrarIdCurso( valor AS Integer) as boolean 
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
sqlstring="DELETE FROM EstadoCurso WHERE idCurso=" & str$(valor) 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: "   & error.text)
 return false
else
conectar.desconectar() 
 return true
ENDIF 
END

PUBLIC function BorrarIdExpediente( valor AS Integer) as boolean 
     Dim conectar as new conexion
     Dim SQLString as string
     conectar.Conexion()
sqlstring="DELETE FROM EstadoCurso WHERE idExpediente=" & str$(valor) 
Try conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
  Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: "   & error.text)
 return false
else
conectar.desconectar() 
 return true
ENDIF 
END

PUBLIC function BuscarIgualIdAlumno( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idAlumno like '" & valor & "' "
else 
   SQlString &= " WHERE idAlumno like '" & valor & "'   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMenorQueIdAlumno( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idAlumno<" & valor 
else 
   SQlString &= " WHERE idAlumno<" & valor & "   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMayorQueIdAlumno( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idAlumno>" & valor  
else 
   SQlString &= " WHERE idAlumno>" & valor & "  Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarEntreIdAlumno( valorMin AS Integer, valorMax AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idAlumno BETWEEN " & valorMin & " And " & valorMax  
else 
   SQlString &= " WHERE idAlumno BETWEEN " & valorMin & " And " & valorMax & " Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarIgualIdEstadoCurso( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idEstadoCurso like '" & valor & "' "
else 
   SQlString &= " WHERE idEstadoCurso like '" & valor & "'   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMenorQueIdEstadoCurso( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idEstadoCurso<" & valor 
else 
   SQlString &= " WHERE idEstadoCurso<" & valor & "   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMayorQueIdEstadoCurso( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idEstadoCurso>" & valor  
else 
   SQlString &= " WHERE idEstadoCurso>" & valor & "  Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarEntreIdEstadoCurso( valorMin AS Integer, valorMax AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idEstadoCurso BETWEEN " & valorMin & " And " & valorMax  
else 
   SQlString &= " WHERE idEstadoCurso BETWEEN " & valorMin & " And " & valorMax & " Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarIgualIdCurso( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idCurso like '" & valor & "' "
else 
   SQlString &= " WHERE idCurso like '" & valor & "'   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMenorQueIdCurso( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idCurso<" & valor 
else 
   SQlString &= " WHERE idCurso<" & valor & "   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMayorQueIdCurso( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idCurso>" & valor  
else 
   SQlString &= " WHERE idCurso>" & valor & "  Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarEntreIdCurso( valorMin AS Integer, valorMax AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idCurso BETWEEN " & valorMin & " And " & valorMax  
else 
   SQlString &= " WHERE idCurso BETWEEN " & valorMin & " And " & valorMax & " Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarIgualIdExpediente( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idExpediente like '" & valor & "' "
else 
   SQlString &= " WHERE idExpediente like '" & valor & "'   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMenorQueIdExpediente( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idExpediente<" & valor 
else 
   SQlString &= " WHERE idExpediente<" & valor & "   Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarMayorQueIdExpediente( valor AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idExpediente>" & valor  
else 
   SQlString &= " WHERE idExpediente>" & valor & "  Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function BuscarEntreIdExpediente( valorMin AS Integer, valorMax AS Integer,optional CampoOrden as string ) as result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
SQLString="Select * From EstadoCurso"
If CampoOrden=null then 
   SQlString &= " WHERE idExpediente BETWEEN " & valorMin & " And " & valorMax  
else 
   SQlString &= " WHERE idExpediente BETWEEN " & valorMin & " And " & valorMax & " Order by " & CampoOrden
endif 
Try mRs=conectar.hconn.Exec(SQLString) 
IF ERROR THEN 
Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text )
else 
return mRs
ENDIF 
END  

PUBLIC function sql( consulta AS string) As result
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
  conectar.Conexion()
try mRs=conectar.hconn.Exec(consulta) 
If error then message.info("Consulta erronea, revisela")
return mRs 
END 

PUBLIC Function informe() as string
 dim texto as string
print "Base de datos: CursosAlumnos"
print "        Tabla: EstadoCurso"
print "             Campo: idAlumno Tipo: Integer"
print "             Campo: idEstadoCurso Tipo: Integer"
print "             Campo: idCurso Tipo: Integer"
print "             Campo: idExpediente Tipo: Integer"
 texto= "Base_de_datos:|CursosAlumnos|"
 texto &= "Tabla:|EstadoCurso"
 texto &= "|campo:|idAlumno|tipo:|Integer"
 texto &= "|campo:|idEstadoCurso|tipo:|Integer"
 texto &= "|campo:|idCurso|tipo:|Integer"
 texto &= "|campo:|idExpediente|tipo:|Integer"
 Return texto 
end

PUBLIC Function gridFormatearColumnas(grid AS GridView) as gridview
   WITH grid 
      .header = 3 
      .rows.count = 0 
      .columns.count = 4 
      .Columns[0].title = "idAlumno"
      .Columns[0].width = 80
      .Columns[1].title = "idEstadoCurso"
      .Columns[1].width = 80
      .Columns[2].title = "idCurso"
      .Columns[2].width = 80
      .Columns[3].title = "idExpediente"
      .Columns[3].width = 80
      .font.name = "Sans"
      .font.size = 10 
      .Background = 16777215 
      .Foreground = 0 
   END WITH
 Return grid 
END

PUBLIC FUNCTION gridFormatearFilas(grid AS GridView) AS gridview  
   WITH grid  
      .header = 3 
      .rows.count =4
      .columns.count = 2  
      .Columns[0].title = "Campos"  
      .Columns[1].title = "Registro"  
      .font.name = "Sans"
      .font.size = 10 
      .Background = 16777215 
      .Foreground = 0 
   END WITH
      grid[0,0].text = "idAlumno" 
      grid[0,0].background = color.lightgray  
      grid[1,0].text = "idEstadoCurso" 
      grid[1,0].background = color.lightgray  
      grid[2,0].text = "idCurso" 
      grid[2,0].background = color.lightgray  
      grid[3,0].text = "idExpediente" 
      grid[3,0].background = color.lightgray  
 Return grid 
END

PUBLIC SUB contenido() as result 
     Dim conectar as new conexion
     Dim SQLString as string
     Dim mRs as result
     conectar.Conexion()
     SQLString  = "SELECT * FROM EstadoCurso" 
     try mRs = conectar.hconn.Exec(SQLString) 
If error then message.info("Consulta erronea, revisela")
RETURN mRs 
End 

PUBLIC FUNCTION mostrarRegistro(numero AS Integer, grid AS GridView, OPTIONAL sqlcadena AS String) AS Result
DIM resultado AS Result
IF sqlcadena = NULL THEN 
resultado = contenido()
ELSE 
resultado = sql(sqlcadena)
ENDIF 
resultado.MoveTo(numero)
TRY grid[0, 1].text = Str$(resultado!idAlumno)
TRY grid[1, 1].text = Str$(resultado!idEstadoCurso)
TRY grid[2, 1].text = Str$(resultado!idCurso)
TRY grid[3, 1].text = Str$(resultado!idExpediente)
END

PUBLIC FUNCTION GridResultanteSQL(res AS result, grid AS GridView) AS gridview  
DIM columna AS Integer
DIM hField AS ResultField
DIM a AS Integer
DIM fila AS Integer
'defino la regilla
   WITH grid 
      .header = 3 
      .rows.count = 0 
 try     .columns.count = res.Fields.Count 
      columna = -1
       FOR EACH hField IN res.Fields
      columna = columna + 1
 try     .Columns[columna].title = Str$(hField.name)
       NEXT 
       .font.name = "Sans"
      .font.size = 10
      .Background = 16777215 
      .Foreground = 0 
   END WITH
'NO HACE FALTA:relleno los datos procedentes de la consulta en las filas...
'Grid.Rows.count = res.Count
' fila = -1
'  DO WHILE res.Available
'   INC fila
'    FOR a = 0 TO grid.columns.count - 1
'    'PRINT grid.Columns[a].title
'     grid[fila, a].text = res[grid.Columns[a].title] ' nombre 'grid.Columns[a].title]
'    NEXT 
'    res.MoveNext()
'  LOOP
 RETURN grid 
END

