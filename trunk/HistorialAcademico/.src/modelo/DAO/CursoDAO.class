' Gambas class file

Public Function Total() As Integer 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "SELECT idCurso FROM Curso" 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Intentar obtener lista")
    Return -1 
  Endif 
  Return Val(Str$(mRs.Count)) 
  
End 

Public Function registrar(NuevaCurso As CursoVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "INSERT INTO Curso(idCurso,Nombre,Detalle) Values ("
  SQLString &= "Null" 
  SQLString &= ",'" & NuevaCurso.Nombre & "'"
  SQLString &= ",'" & NuevaCurso.Detalle & "')"
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Intentar insertar datos, revise ID,  " & "\nError:  " & error.text)
    Return False 
  Endif 
  conectar.desconectar() 
  Return True 
  
End  

Public Function ModificarIdCurso(editado As Integer, NuevaCurso As CursoVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "UPDATE  Curso SET "
  SQLString &= "Nombre='" & NuevaCurso.Nombre 
  SQLString &= "', Detalle='" & NuevaCurso.Detalle & "'" 
  SQlString &= " WHERE idCurso='" & editado & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Modificar datos ")
    Return False
  Else 
    conectar.desconectar() 
    Return True
  Endif 
  
End  

Public Function ModificarNombre(editado As String, NuevaCurso As CursoVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "UPDATE  Curso SET "
  SQLString &= "idCurso='" & NuevaCurso.idCurso 
  SQLString &= "', Detalle='" & NuevaCurso.Detalle & "'" 
  SQlString &= " WHERE Nombre='" & editado & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Modificar datos ")
    Return False
  Else 
    conectar.desconectar() 
    Return True
  Endif 
  
End  

Public Function ModificarDetalle(editado As String, NuevaCurso As CursoVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "UPDATE  Curso SET "
  SQLString &= "idCurso='" & NuevaCurso.idCurso 
  SQLString &= "', Nombre='" & NuevaCurso.Nombre & "'"
  SQlString &= " WHERE Detalle='" & editado & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Modificar datos ")
    Return False
  Else 
    conectar.desconectar() 
    Return True
  Endif 
  
End  

Public Function BorrarIdCurso(valor As Integer) As Boolean 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  sqlstring = "DELETE FROM Curso WHERE idCurso=" & Str$(valor) 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar() 
    Return True
  Endif 
  
End

Public Function BorrarNombre(valor As String) As Boolean 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  sqlstring = "DELETE FROM Curso WHERE Nombre='" & valor & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar() 
    Return True
  Endif 
  
End

Public Function BorrarDetalle(valor As String) As Boolean 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  sqlstring = "DELETE FROM Curso WHERE Detalle='" & valor & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar() 
    Return True
  Endif 
  
End

Public Function BuscarIgualIdCurso(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Curso"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idCurso like '" & valor & "' "
  Else 
    SQlString &= " WHERE idCurso like '" & valor & "'   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarContenidoNombre(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Curso"
  If CampoOrden = Null Then 
    SQlString &= " WHERE Nombre like '%" & valor & "%' "
  Else 
    SQlString &= " WHERE Nombre like '%" & valor & "%'  Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarIgualNombre(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Curso"
  If CampoOrden = Null Then 
    SQlString &= " WHERE Nombre like '" & valor & "' "
  Else 
    SQlString &= " WHERE Nombre like '" & valor & "'   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarContenidoDetalle(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Curso"
  If CampoOrden = Null Then 
    SQlString &= " WHERE Detalle like '%" & valor & "%' "
  Else 
    SQlString &= " WHERE Detalle like '%" & valor & "%'  Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarIgualDetalle(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Curso"
  If CampoOrden = Null Then 
    SQlString &= " WHERE Detalle like '" & valor & "' "
  Else 
    SQlString &= " WHERE Detalle like '" & valor & "'   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function sql(consulta As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  Try mRs = conectar.hconn.Exec(consulta) 
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs 
  
End 

Public Function informe() As String
  
  Dim texto As String

  Print "Base de datos: CursosAlumnos"
  Print "        Tabla: Curso"
  Print "             Campo: idCurso Tipo: Null"
  Print "             Campo: Nombre Tipo: String"
  Print "             Campo: Detalle Tipo: String"
  texto = "Base_de_datos:|CursosAlumnos|"
  texto &= "Tabla:|Curso"
  texto &= "|campo:|idCurso|tipo:|Null"
  texto &= "|campo:|Nombre|tipo:|String"
  texto &= "|campo:|Detalle|tipo:|String"
  Return texto 
  
End

Public Function gridFormatearColumnas(grid As GridView) As Gridview
  
  With grid 
    .header = 3 
    .rows.count = 0 
    .columns.count = 3 
    .Columns[0].title = "idCurso"
    .Columns[0].width = 80
    .Columns[1].title = "Nombre"
    .Columns[1].width = 80
    .Columns[2].title = "Detalle"
    .Columns[2].width = 80
    .font.name = "Sans"
    .font.size = 10 
    .Background = 16777215 
    .Foreground = 0 
  End With
  Return grid 
  
End

Public Function gridFormatearFilas(grid As GridView) As Gridview  
  
  With grid  
    .header = 3 
    .rows.count = 3
    .columns.count = 2  
    .Columns[0].title = "Campos"  
    .Columns[1].title = "Registro"  
    .font.name = "Sans"
    .font.size = 10 
    .Background = 16777215 
    .Foreground = 0 
  End With
  grid[0, 0].text = "idCurso" 
  grid[0, 0].background = color.lightgray  
  grid[1, 0].text = "Nombre" 
  grid[1, 0].background = color.lightgray  
  grid[2, 0].text = "Detalle" 
  grid[2, 0].background = color.lightgray  
  Return grid 
  
End

Public Sub contenido() As Result 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "SELECT * FROM Curso" 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs 
  
End 

Public Function mostrarRegistro(numero As Integer, grid As GridView, Optional sqlcadena As String) As Result

  Dim resultado As Result
  If sqlcadena = Null Then 
    resultado = contenido()
  Else 
    resultado = sql(sqlcadena)
  Endif 
  resultado.MoveTo(numero)
  Try grid[0, 1].text = Str$(resultado!idCurso)
  Try grid[1, 1].text = Str$(resultado!Nombre)
  Try grid[2, 1].text = Str$(resultado!Detalle)

End

Public Function GridResultanteSQL(res As Result, grid As GridView) As Gridview  

  Dim columna As Integer
  Dim hField As ResultField
  Dim a As Integer
  Dim fila As Integer
  'defino la regilla
  With grid 
    .header = 3 
    .rows.count = 0 
    Try .columns.count = res.Fields.Count 
    columna = -1
    For Each hField In res.Fields
      columna = columna + 1
      Try .Columns[columna].title = Str$(hField.name)
    Next 
    .font.name = "Sans"
    .font.size = 10
    .Background = 16777215 
    .Foreground = 0 
  End With
  'NO HACE FALTA:relleno los datos procedentes de la consulta en las filas...
  'Grid.Rows.count = res.Count
  ' fila = -1
  '  DO WHILE res.Available
  '   INC fila
  '    FOR a = 0 TO grid.columns.count - 1
  '    'PRINT grid.Columns[a].title
  '     grid[fila, a].text = res[grid.Columns[a].title] ' nombre 'grid.Columns[a].title]
  '    NEXT 
  '    res.MoveNext()
  '  LOOP
 Return grid 
End

