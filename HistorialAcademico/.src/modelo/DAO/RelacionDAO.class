' Gambas class file

Public Function Total() As Integer 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "SELECT idRelacion FROM Relacion" 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Intentar obtener lista")
    Return -1 
  Endif 
  Return Val(Str$(mRs.Count)) 
  
End 

Public Function registrar(NuevaRelacion As RelacionVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "INSERT INTO Relacion(idRelacion,idAlumno,idCurso,Observacion) Values ("
  SQLString &= "Null" 
  SQLString &= ",'" & NuevaRelacion.idAlumno & "'"
  SQLString &= ",'" & NuevaRelacion.idCurso & "'"
  SQLString &= ",'" & NuevaRelacion.Observacion & "')"
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Intentar insertar datos, revise ID,  " & "\nError:  " & error.text)
    Return False 
  Endif 
  conectar.desconectar() 
  Return True 
  
End  

Public Function ModificarIdRelacion(editado As Integer, NuevaRelacion As RelacionVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "UPDATE  Relacion SET "
  SQLString &= "idAlumno='" & NuevaRelacion.idAlumno 
  SQLString &= "', idCurso='" & NuevaRelacion.idCurso 
  SQLString &= "', Observacion='" & NuevaRelacion.Observacion & "'" 
  SQlString &= " WHERE idRelacion='" & editado & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Modificar datos ")
    Return False
  Else 
    conectar.desconectar() 
    Return True
  Endif 
  
End  

Public Function ModificarIdAlumno(editado As Integer, NuevaRelacion As RelacionVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "UPDATE  Relacion SET "
  SQLString &= "idRelacion='" & NuevaRelacion.idRelacion 
  SQLString &= "', idCurso='" & NuevaRelacion.idCurso 
  SQLString &= "', Observacion='" & NuevaRelacion.Observacion & "'" 
  SQlString &= " WHERE idAlumno='" & editado & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Modificar datos ")
    Return False
  Else 
    conectar.desconectar() 
    Return True
  Endif 
  
End  

Public Function ModificarIdCurso(editado As Integer, NuevaRelacion As RelacionVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "UPDATE  Relacion SET "
  SQLString &= "idRelacion='" & NuevaRelacion.idRelacion 
  SQLString &= "', idAlumno='" & NuevaRelacion.idAlumno 
  SQLString &= "', Observacion='" & NuevaRelacion.Observacion & "'" 
  SQlString &= " WHERE idCurso='" & editado & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Modificar datos ")
    Return False
  Else 
    conectar.desconectar() 
    Return True
  Endif 
  
End  

Public Function ModificarObservacion(editado As String, NuevaRelacion As RelacionVO) As Boolean
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  SQLString = "UPDATE  Relacion SET "
  SQLString &= "idRelacion='" & NuevaRelacion.idRelacion 
  SQLString &= "', idAlumno='" & NuevaRelacion.idAlumno 
  SQLString &= "', idCurso='" & NuevaRelacion.idCurso & "'"
  SQlString &= " WHERE Observacion='" & editado & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Modificar datos ")
    Return False
  Else 
    conectar.desconectar() 
    Return True
  Endif 
  
End  

Public Function BorrarIdRelacion(valor As Integer) As Boolean 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  sqlstring = "DELETE FROM Relacion WHERE idRelacion=" & Str$(valor) 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar() 
    Return True
  Endif 
  
End

Public Function BorrarIdAlumno(valor As Integer) As Boolean 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  sqlstring = "DELETE FROM Relacion WHERE idAlumno=" & Str$(valor) 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar() 
    Return True
  Endif 
  
End

Public Function BorrarIdCurso(valor As Integer) As Boolean 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  sqlstring = "DELETE FROM Relacion WHERE idCurso=" & Str$(valor) 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar() 
    Return True
  Endif 
  
End

Public Function BorrarObservacion(valor As String) As Boolean 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  
  conectar.Conexion()
  sqlstring = "DELETE FROM Relacion WHERE Observacion='" & valor & "'" 
  Try conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar() 
    Return True
  Endif 
  
End

Public Function BuscarIgualIdRelacion(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idRelacion like '" & valor & "' "
  Else 
    SQlString &= " WHERE idRelacion like '" & valor & "'   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarIgualIdAlumno(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idAlumno like '" & valor & "' "
  Else 
    SQlString &= " WHERE idAlumno like '" & valor & "'   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarMenorQueIdAlumno(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idAlumno<" & valor 
  Else 
    SQlString &= " WHERE idAlumno<" & valor & "   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarMayorQueIdAlumno(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idAlumno>" & valor  
  Else 
    SQlString &= " WHERE idAlumno>" & valor & "  Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarEntreIdAlumno(valorMin As Integer, valorMax As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idAlumno BETWEEN " & valorMin & " And " & valorMax  
  Else 
    SQlString &= " WHERE idAlumno BETWEEN " & valorMin & " And " & valorMax & " Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarIgualIdCurso(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idCurso like '" & valor & "' "
  Else 
    SQlString &= " WHERE idCurso like '" & valor & "'   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarMenorQueIdCurso(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idCurso<" & valor 
  Else 
    SQlString &= " WHERE idCurso<" & valor & "   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarMayorQueIdCurso(valor As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idCurso>" & valor  
  Else 
    SQlString &= " WHERE idCurso>" & valor & "  Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarEntreIdCurso(valorMin As Integer, valorMax As Integer, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE idCurso BETWEEN " & valorMin & " And " & valorMax  
  Else 
    SQlString &= " WHERE idCurso BETWEEN " & valorMin & " And " & valorMax & " Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarContenidoObservacion(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE Observacion like '%" & valor & "%' "
  Else 
    SQlString &= " WHERE Observacion like '%" & valor & "%'  Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function BuscarIgualObservacion(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From Relacion"
  If CampoOrden = Null Then 
    SQlString &= " WHERE Observacion like '" & valor & "' "
  Else 
    SQlString &= " WHERE Observacion like '" & valor & "'   Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else 
    Return mRs
  Endif 
  
End  

Public Function sql(consulta As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  Try mRs = conectar.hconn.Exec(consulta) 
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs 
  
End 

Public Function informe() As String
  
  Dim texto As String

  Print "Base de datos: CursosAlumnos"
  Print "        Tabla: Relacion"
  Print "             Campo: idRelacion Tipo: Null"
  Print "             Campo: idAlumno Tipo: Integer"
  Print "             Campo: idCurso Tipo: Integer"
  Print "             Campo: Observacion Tipo: String"
  texto = "Base_de_datos:|CursosAlumnos|"
  texto &= "Tabla:|Relacion"
  texto &= "|campo:|idRelacion|tipo:|Null"
  texto &= "|campo:|idAlumno|tipo:|Integer"
  texto &= "|campo:|idCurso|tipo:|Integer"
  texto &= "|campo:|Observacion|tipo:|String"
  Return texto 
  
End

Public Function gridFormatearColumnas(grid As GridView) As Gridview
  
  With grid 
    .header = 3 
    .rows.count = 0 
    .columns.count = 4 
    .Columns[0].title = "idRelacion"
    .Columns[0].width = 80
    .Columns[1].title = "idAlumno"
    .Columns[1].width = 80
    .Columns[2].title = "idCurso"
    .Columns[2].width = 80
    .Columns[3].title = "Observacion"
    .Columns[3].width = 80
    .font.name = "Sans"
    .font.size = 10 
    .Background = 16777215 
    .Foreground = 0 
  End With
  Return grid 
  
End

Public Function gridFormatearFilas(grid As GridView) As Gridview  
  
  With grid  
    .header = 3 
    .rows.count = 4
    .columns.count = 2  
    .Columns[0].title = "Campos"  
    .Columns[1].title = "Registro"  
    .font.name = "Sans"
    .font.size = 10 
    .Background = 16777215 
    .Foreground = 0 
  End With
  grid[0, 0].text = "idRelacion" 
  grid[0, 0].background = color.lightgray  
  grid[1, 0].text = "idAlumno" 
  grid[1, 0].background = color.lightgray  
  grid[2, 0].text = "idCurso" 
  grid[2, 0].background = color.lightgray  
  grid[3, 0].text = "Observacion" 
  grid[3, 0].background = color.lightgray  
  Return grid 

End

Public Sub contenido() As Result 

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "SELECT * FROM Relacion" 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs 

End 

Public Function mostrarRegistro(numero As Integer, grid As GridView, Optional sqlcadena As String) As Result

  Dim resultado As Result
  If sqlcadena = Null Then 
    resultado = contenido()
  Else 
    resultado = sql(sqlcadena)
  Endif 
  resultado.MoveTo(numero)
  Try grid[0, 1].text = Str$(resultado!idRelacion)
  Try grid[1, 1].text = Str$(resultado!idAlumno)
  Try grid[2, 1].text = Str$(resultado!idCurso)
  Try grid[3, 1].text = Str$(resultado!Observacion)

End

Public Function GridResultanteSQL(res As Result, grid As GridView) As Gridview  

  Dim columna As Integer
  Dim hField As ResultField
  Dim a As Integer
  Dim fila As Integer
  'defino la regilla
  With grid 
    .header = 3 
    .rows.count = 0 
    Try .columns.count = res.Fields.Count 
    columna = -1
    For Each hField In res.Fields
      columna = columna + 1
      Try .Columns[columna].title = Str$(hField.name)
    Next 
    .font.name = "Sans"
    .font.size = 10
    .Background = 16777215 
    .Foreground = 0 
  End With
  'NO HACE FALTA:relleno los datos procedentes de la consulta en las filas...
  'Grid.Rows.count = res.Count
  ' fila = -1
  '  DO WHILE res.Available
  '   INC fila
  '    FOR a = 0 TO grid.columns.count - 1
  '    'PRINT grid.Columns[a].title
'     grid[fila, a].text = res[grid.Columns[a].title] ' nombre 'grid.Columns[a].title]
'    NEXT 
'    res.MoveNext()
'  LOOP
 Return grid 
End

