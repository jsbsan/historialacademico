' Gambas module file

Public rutaTrabajo As String = User.home & "/.HistorialAcademico/"

Public Sub main()
  
  Dim entrada As Boolean
  'iniciar programa...
  
  Dim ControladorAplicacion As New Controlador
  Dim FormularioControlAcceso As New FControlAcceso
  Dim FormularioPrincipal As New FormPrincipal
  Dim fasignatura As New Formasignatura
  Dim falumno As New FormAlumno
  Dim fexpasignatura As New FormExpedienteasignatura
  Dim fexpAlumno As New FormExpedienteAlumno
  Dim logicatmp As New Logica
  Dim eligeasignatura As New FormEligeasignatura
  Dim eligeAlumno As New FormEligeAlumno
  
  eligeasignatura.Persistent = True
  eligeAlumno.Persistent = True
  
  'modulos / Clases Estaticas
  Imprimir.controladorAplicacion = ControladorAplicacion
  
  'relaciones MODELO VISTA CONTROLADOR
  FormularioControlAcceso.ControladorAplicacion = ControladorAplicacion
  FormularioPrincipal.ControladorAplicacion = ControladorAplicacion
  falumno.ControladorAplicacion = ControladorAplicacion
  fasignatura.ControladorAplicacion = ControladorAplicacion
  fexpasignatura.ControladorAplicacion = ControladorAplicacion
  fexpAlumno.ControladorAplicacion = ControladorAplicacion
  logicatmp.ControladorAplicacion = ControladorAplicacion
  eligeasignatura.ControladorAplicacion = ControladorAplicacion
  eligeAlumno.ControladorAplicacion = ControladorAplicacion
  
  ControladorAplicacion.controlAcceso = FormularioControlAcceso
  ControladorAplicacion.Fprincipal = FormularioPrincipal
  ControladorAplicacion.falumno = falumno
  ControladorAplicacion.fasignatura = fasignatura
  ControladorAplicacion.fExpasignatura = fexpasignatura
  ControladorAplicacion.fexpAlumno = fexpAlumno
  ControladorAplicacion.log = Logicatmp
  ControladorAplicacion.eligeasignatura = eligeasignatura
  ControladorAplicacion.eligeAlumno = eligeAlumno
  
  'inicio directorios
  iniciarDirectoriosYArchivos(ControladorAplicacion) 
  controladorAplicacion.rutainformes = "/tmp"
  
  'inicio usuario/password si no estan definidas
  ControladorAplicacion.comprobarUsuarioPassword()
  
  entrada = ControladorAplicacion.controlAcceso.Showmodal() 
  
  If entrada = True Then 
    'puedo continual con el program
    ControladorAplicacion.fprincipal.Showmodal()
  Endif
  
  'terminar ejecucion del programa
  'anular relaciones entre formularios y clases
  FormularioControlAcceso.ControladorAplicacion = Null
  ControladorAplicacion.controlAcceso = Null
  
  FormularioPrincipal.ControladorAplicacion = Null
  ControladorAplicacion.fprincipal = Null 
  
  falumno.ControladorAplicacion = Null
  ControladorAplicacion.falumno = Null
  
  fasignatura.ControladorAplicacion = Null
  ControladorAplicacion.fasignatura = Null
  
  fexpasignatura.ControladorAplicacion = Null
  ControladorAplicacion.fExpasignatura = Null
  
  fexpAlumno.ControladorAplicacion = Null
  ControladorAplicacion.fexpAlumno = Null
  
  logicatmp.ControladorAplicacion = Null
  ControladorAplicacion.log = Null
  
  eligeasignatura.ControladorAplicacion = Null
  ControladorAplicacion.eligeasignatura = Null
  
  eligeAlumno.ControladorAplicacion = Null
  ControladorAplicacion.eligeAlumno = Null
  
  'anulamos los objetos en si
  eligeAlumno = Null
  logicatmp = Null
  fexpAlumno = Null
  fexpasignatura = Null
  fasignatura = Null
  falumno = Null
  FormularioPrincipal = Null
  FormularioControlAcceso = Null
  ControladorAplicacion = Null
  
  Quit
  
End

Public Sub iniciarDirectoriosYArchivos(controladorApli As Controlador)

  Dim a As Integer
  Dim tabla As New String[]
  Dim con As New Conexion
  'defino ruta de trabajo
  
  ControladorApli.rutaTrabajo = rutaTrabajo '
  'creo el directorio de trabajo si no existe
  If Exist(ControladorApli.rutaTrabajo) Then 
  Else
    Mkdir ControladorApli.rutaTrabajo
  Endif
  
  'copio la base de datos si no existe
  If Exist(ControladorApli.rutaTrabajo & "CursosAlumnos") Then 
    
  Else
    Copy "CursosAlumnosVacia" To ControladorApli.rutaTrabajo & "/CursosAlumnos"
    'a√±ado tablas...
    con.Conexion()
    tabla.add("CREATE TABLE EstadoCurso( idAlumno INTEGER, idEstadoCurso INTEGER PRIMARY KEY AUTOINCREMENT, idCurso INTEGER, idExpediente INTEGER)") 
    tabla.add("CREATE TABLE DetalleEstadoCurso(idEstadoCurso INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT)")
    tabla.add("CREATE TABLE Asignatura(idAsignatura INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT, Detalle TEXT, idCurso INTEGER)")
    tabla.add("CREATE TABLE Curso(idCurso INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT, Detalle TEXT, idDivision INTEGER)")
    tabla.add("CREATE TABLE Division(idDivision INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT)") 
    tabla.add("CREATE TABLE Expediente(idExpediente INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT)")
    tabla.add("CREATE TABLE EstadoAsignatura(idEstadoAsignatura INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT)")  
    tabla.add("CREATE TABLE Relacion(idRelacion INTEGER PRIMARY KEY AUTOINCREMENT, idAlumno INTEGER, idAsignatura INTEGER, Observacion TEXT, idEstadoAsignatura INTEGER, idExpediente INTEGER, nota NUMERIC)") 
    tabla.add("CREATE TABLE Alumno(RutaFoto TEXT, idAlumno INTEGER PRIMARY KEY AUTOINCREMENT, Apellido TEXT, Nombre TEXT, Documento TEXT, FechaNacimiento DATE, Domicilio TEXT, Telefono TEXT, Nacionalidad TEXT, EscOrigen TEXT, Legajo TEXT)")
    
    For a = 0 To tabla.Max
      con.hconn.Exec(tabla[a])
    Next
    
    'con.hconn.Exec("CREATE TABLE asignatura(idasignatura INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT, Detalle TEXT)")
    'con.hconn.Exec("CREATE TABLE asignatura(idasignatura INTEGER PRIMARY KEY AUTOINCREMENT, Nombre TEXT, Detalle TEXT)")
    'con.hconn.Exec("Create TABLE Relacion(idRelacion INTEGER PRIMARY KEY AUTOINCREMENT, idAlumno NUMERIC, idasignatura NUMERIC, Observacion TEXT)")
    'con.hconn.Exec("Create TABLE Alumno(RutaFoto TEXT, idAlumno INTEGER PRIMARY KEY AUTOINCREMENT, Apellido TEXT, Nombre TEXT, Documento TEXT, FechaNacimiento DATE, Domicilio TEXT, Telefono TEXT, Nacionalidad TEXT, EscOrigen TEXT, Legajo TEXT); ")
    If Error Then 
      Message.Info("Se ha producido un error al intentar crear las tablas" & gb.CrLf & "Error: " & Error.Text)
      Return
      
    Endif
    con.desconectar()
    
  Endif
  
  'creo el directorio de fotos  si no existe
  If Exist(ControladorApli.rutaTrabajo & "Fotos") Then 
  Else
    Mkdir ControladorApli.rutaTrabajo & "Fotos"
  Endif
  
  'creo el directorio de fotosmini  si no existe
  If Exist(ControladorApli.rutaTrabajo & "MiniFotos") Then 
  Else
    
    Mkdir ControladorApli.rutaTrabajo & "MiniFotos"
  Endif
  
  'copio el fichero transparente si no existe
  If Exist(ControladorApli.rutaTrabajo & "Fotos/transparente.png") Then 
  Else
    Copy "transparente.png" To ControladorApli.rutaTrabajo & "Fotos/transparente.png"
  Endif
  
  'copio porgrama de tomar fotos
  If Exist(ControladorApli.rutaTrabajo & "FotoCarnetMyWebCam.gambas") Then 
  Else
    Copy "FotoCarnetMyWebCam.gambas1" To ControladorApli.rutaTrabajo & "FotoCarnetMyWebCam.gambas"
    Wait 0.5
    Chmod ControladorApli.rutaTrabajo & "FotoCarnetMyWebCam.gambas" To "rwxrwxrwx"
  Endif
  
End
